
#include <iostream>
#include <cstdlib> // you need this for random function 
#include <vector>
using namespace std;

// passing by value, pass by refernce, pass an array, pass a vector

// pass by value 
void passByValue(int i ) {
    i++;
}

void passByRefernce(int &i) {
    i++;
}

void passAnArray(int a[] ) {
    a[0] = 5;
}

void passAVector(vector<int> v) {
    v[0] = 5;
}
int main() {
    int i = 0;
    passByValue(i); // i is not updated in main
        // i = 0 here
    passByRefernce(i); // address of i is passed to the function 
        // i = 1 here 
    int a[2] = {0,0};
    passAnArray(a);
        // a[0] = 5 here
    vector<int> v(2);
    passAVector(v);
        // v[0] = 0 here. vectors are pass by value 
    
    // generate random numbers 
    // how often calamity occurs
    // generate a random card draw and a deck of cards

    // need to seed the random number generator 
    srand((unsigned)time(NULL)); // passes the current time in seconds into the random number seed function 
    int random = rand(); // no upper bound on random number generated
    // put a range on our numbers
    random = rand() % 10; // geernate a random number between 0- 9
    cout << random << endl;
    // offset + random % range
    random = 1 + rand() % 10; // shifts numbers to 1 - 10
    random = 5 + rand() % 10; // 5-15

    // calamity: if i generate a number between 1-100, the number should be 40 or less 40% of the time 
    int count = 0;
    for(int i = 0; i < 100; i++) {
        random = 1+rand()%100; // this generates a number 1-100
        if(random <= 40){
            count++;
        }
    }

    // we should see a count right around 40 every time, but we are not expecting exactly 40
    cout << "count: " << count << endl;
    // if you want a distribution of cards, single and double color
    // how do we set up our cards such that single colors are more liely to be drawn than double colors
    // single twice as likely as double 
    /*
    create an array with 9 positions
    each signgle colors gets two positions, and each double color gets one position
    generate a random number 0-9 that is the index in the array
    because the single colors ahve two positions, they are twice as likely to be drawn as the doiuble colors
    */
   int cards[9] = {1, 2, 3, 1, 2, 3, 11, 12, 13}; // 1, 2, 3 represnets signles, 11, 12, 13 are doubles
   // draw 100 cards and keep track of counts 
   int cardCounts[6]  = {0,0,0,0,0,0}; // count for each card drawn
   for(int i = 0; i < 100; i++) {
    random = rand() % 9; // index of cards array
    if(random == 0 || random == 3) {
        cardCounts[0]++; // this represents 1 being generated by random 
        cout <<  cards[0] << " selected" << endl;
    } else if(random == 1 || random == 4) {
        cardCounts[1]++;
        cout <<  cards[1] << " selected" << endl;
    } else if(random == 2 || random == 5) {
        cardCounts[2]++;
        cout <<  cards[2] << " selected" << endl;
    } else if(random == 6) {
        cardCounts[3]++;
        cout <<  cards[6] << " selected" << endl;
    } else if(random == 7) {
        cardCounts[4]++;
        cout << cards[7] << " selected" << endl;
    } else {
        cardCounts[5]++;
        cout << cards[8] << " selected" << endl;
    }
   } 

   for (int i = 0; i < 6; i++) {
    cout << cardCounts[i] << endl;
   }
}